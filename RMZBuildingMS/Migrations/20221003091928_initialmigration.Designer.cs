// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RMZBuildingMS.Models;

#nullable disable

namespace RMZBuildingMS.Migrations
{
    [DbContext(typeof(RMZContext))]
    [Migration("20221003091928_initialmigration")]
    partial class initialmigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RMZBuildingMS.Models.Building", b =>
                {
                    b.Property<int>("BuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BuildingId"));

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FacilityId")
                        .HasColumnType("integer");

                    b.HasKey("BuildingId");

                    b.HasIndex("FacilityId");

                    b.ToTable("buildings");
                });

            modelBuilder.Entity("RMZBuildingMS.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CityId"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CityId");

                    b.ToTable("Citys");
                });

            modelBuilder.Entity("RMZBuildingMS.Models.Facility", b =>
                {
                    b.Property<int>("FacilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FacilityId"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("FacilityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("FacilityId");

                    b.HasIndex("CityId");

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("RMZBuildingMS.Models.Floor", b =>
                {
                    b.Property<int>("FloorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FloorId"));

                    b.Property<int>("BuildingId")
                        .HasColumnType("integer");

                    b.Property<string>("FloorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("FloorId");

                    b.HasIndex("BuildingId");

                    b.ToTable("floors");
                });

            modelBuilder.Entity("RMZBuildingMS.Models.Zone", b =>
                {
                    b.Property<string>("ZoneId")
                        .HasColumnType("text");

                    b.Property<int>("BuildingId")
                        .HasColumnType("integer");

                    b.Property<decimal>("ElectricMeter")
                        .HasColumnType("numeric");

                    b.Property<int>("FacilityId")
                        .HasColumnType("integer");

                    b.Property<int>("FloorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReadingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("WaterMeter")
                        .HasColumnType("numeric");

                    b.HasKey("ZoneId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("FloorId");

                    b.ToTable("zones");
                });

            modelBuilder.Entity("RMZBuildingMS.Models.Building", b =>
                {
                    b.HasOne("RMZBuildingMS.Models.Facility", "Facility")
                        .WithMany("Buildings")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("RMZBuildingMS.Models.Facility", b =>
                {
                    b.HasOne("RMZBuildingMS.Models.City", "City")
                        .WithMany("Facilities")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("RMZBuildingMS.Models.Floor", b =>
                {
                    b.HasOne("RMZBuildingMS.Models.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("RMZBuildingMS.Models.Zone", b =>
                {
                    b.HasOne("RMZBuildingMS.Models.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RMZBuildingMS.Models.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RMZBuildingMS.Models.Floor", "Floor")
                        .WithMany("Zones")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("Facility");

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("RMZBuildingMS.Models.City", b =>
                {
                    b.Navigation("Facilities");
                });

            modelBuilder.Entity("RMZBuildingMS.Models.Facility", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("RMZBuildingMS.Models.Floor", b =>
                {
                    b.Navigation("Zones");
                });
#pragma warning restore 612, 618
        }
    }
}
